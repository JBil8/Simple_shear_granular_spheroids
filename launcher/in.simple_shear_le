atom_style	superquadric
atom_modify	map array #command to store atoms IDs in processors
boundary	p p p	#periodic boundary conditions
newton		off #each processor compute the force interaction, more computations but less memory exchanges
echo		both #echo input script to output

communicate	single vel yes

units		si

variable	Axis equal ${Radius}*${aspectRatio}
variable    initialPhi equal 0.4
variable    n_particles equal 2000 #originally 2000

if "${aspectRatio} > 1" then "variable LongSide equal ${Axis}" else "variable LongSide equal ${Radius}" #density of the particles

variable    skin equal 0.5*${LongSide} #skin distance it was 1.2
variable    particle_volume equal PI*4/3*${Radius}*${Radius}*${Axis} #volume of the particles with nominal radius
neigh_modify	check yes delay 0#
neighbor	${skin} bin    

print "Small axis = ${Radius}, axis of symmetry = ${Axis}"

#--------------BOX SET UP -----------------------------------------

# adjust box volume to match the desired packing fraction and number of particles
variable box_volume equal ${n_particles}*${particle_volume}/${initialPhi}
variable box_length equal ${box_volume}^(1/3)

variable xlow equal -${box_length}/2
variable xhigh equal ${box_length}/2
variable ylow equal -${box_length}/2
variable yhigh equal ${box_length}/2
variable zlow equal -${box_length}/2
variable zhigh equal ${box_length}/2

print "Number of particles = ${n_particles}"

region		reg block ${xlow} ${xhigh} ${ylow} ${yhigh} ${zlow} ${zhigh} units box
create_box	1 reg

#--------------MATERIAL PROPERTIES-----------------------------------------

variable    YoungMod equal 5.0e6
variable poissonsRatio equal 0.3
#soft_particle yes 
fix 		m1 all property/global youngsModulus peratomtype ${YoungMod}
fix 		m2 all property/global poissonsRatio peratomtype ${poissonsRatio}
fix 		m3 all property/global coefficientRestitution peratomtypepair 1 0.9 #0.1 #as the rheology paper
fix 		m4 all property/global coefficientFriction peratomtypepair 1 ${COF}

# ---------------------------------------------------------

variable    shearMod equal ${YoungMod}/(2*(1+${poissonsRatio}))
#variable    equivalentStiffness equal (${YoungMod}/${pn})^(2/3)
variable    avgPartVol equal 4./3.*PI*${Radius}*${Radius}*${Axis}
variable    avgRadius equal (2*${Radius}+${Axis})/3
variable    avgDiameter equal 2*${avgRadius}
variable    curvatureLimitFactor equal 100*${Radius}

#New pair style
pair_style gran model hertz tangential history surface superquadric gaussianCurvature yes tangential_damping off curvatureLimitFactor ${curvatureLimitFactor} #Hertzian without cohesion
pair_coeff	* *

timestep	0.001

## This computes needs to be defined before the first time step
compute         contact_data all pair/gran/local id force history
compute         rke all erotate/superquadric

#--------------INSERTING POLYDISPRSE PARTICLE DISTRIBUTION -----------------------------------------
include      in.insertion

fix 		mid_integr all nve/superquadric

run 2999 #to equilibrate the system to lower the initial pressure
velocity all set 0 0 0 #should remove eventual drift
if "${aspectRatio} < 1" then "variable factor_deformation equal ${aspectRatio}" else "variable factor_deformation equal 1"  #FOR  BIGGER v_Y STAEDUY STATE WAS 4 FOR I<0.01 

variable pressure_target equal ${factor_deformation}*${YoungMod}/1e5 # lowering pressure for oblate particles
#--------------COMPUTES BEFORE LOOP-----------------------------------------
compute         stressAtomKin all stress/atom #stress with collisional and frictional components and kinetic term
compute         stressAtom all stress/atom pair #stress with collisional and frictional components no kinetic term
compute         p all reduce sum c_stressAtom[1] c_stressAtom[2] c_stressAtom[3] c_stressAtom[4] 
compute         pKinYy all reduce sum c_stressAtomKin[2] #normal stress
compute         omegaz all property/atom omegaz
compute         average_omegaz all reduce ave c_omegaz #average angular velocity in the vorticity plane to compare with vorticity
variable        total_mass equal mass(all)

compute         thetaX all angleaxis/atom 0 0 1 1 0 0 0 0 1 symmetric #angle wrt x in the xy plane (vorticity plane)
compute         avgThetaX all reduce ave c_thetaX

#max and aberage interpenetration 
compute avgdelta all reduce ave c_contact_data[12]
compute maxdelta all reduce max c_contact_data[12]

compute        tot_contacts all reduce sum c_contact_data[8]   #total number of contacts
variable       avg_contacts equal c_tot_contacts/${n_particles} #average number of contacts per particle 

change_box all triclinic

#--------------VARIOUS COMPUTES (STRESSES) -----------------------------------------
variable        n_bins_avg equal 13
variable        binSize equal 1/${n_bins_avg}

# Variables for per-atom stress components with a constant factor
variable        pxx_loc atom c_stressAtom[1]/vol*${n_bins_avg}
variable        pyy_loc atom c_stressAtom[2]/vol*${n_bins_avg}
variable        pzz_loc atom c_stressAtom[3]/vol*${n_bins_avg}
variable        pxy_loc atom c_stressAtom[4]/vol*${n_bins_avg}

variable        press equal -(c_p[1]+c_p[2]+c_p[3])/(3*vol)
variable        pxy equal c_p[4]/vol
variable        pyy equal -c_pKinYy/vol
variable        mu_effective equal v_pxy/v_pyy

variable        Nx_diff equal (c_p[1]-c_p[2])/vol #first normal stress difference
variable        Nz_diff equal (c_p[2]-c_p[3])/vol #second normal stress difference

variable inertialNumber_targets index ${I}

label loop_shear_rates
    reset_timestep 0 #needed for the average over time
    # Initialize variables for MSD computation
    variable msdY equal 0.0
    variable msdZ equal 0.0
    # Initialize flag to track MSD computation activation
    variable msd_started equal 0

    variable inertialNumber_target equal ${inertialNumber_targets}
    variable shear_rate equal ${inertialNumber_target}*sqrt(${pressure_target}/${density})/${avgDiameter} #shear rate in 1/s

    #stready state strain larger for lower inertial number
    if "${inertialNumber_target} >= 0.01" then "variable steady_gamma equal 6" else "variable steady_gamma equal 6"  #FOR  BIGGER v_Y STAEDUY STATE WAS 4 FOR I<0.01 

    # total starin, strain longer for higher inertial number
    if "${inertialNumber_target} >= 0.001" then "variable final_gamma equal 16" else "variable final_gamma equal 14"

    # #--------------TIME STEPS AND OUTPUTS-----------------------------------------

    variable    vCollision equal ${shear_rate}*2*${avgDiameter} #xpected contact velocity

    variable    hertz_factor equal 2.943*(5*sqrt(2)*3.14*${density}*(1-${poissonsRatio}^2)/(4*${YoungMod}))^(2/5)
    if "${Axis} < ${Radius}" then "variable min_dimen equal ${Axis}" else "variable min_dimen equal ${Radius}" #minimum dimension of the particle
    variable    dt_hertz equal 1.5*0.08*${hertz_factor}*${min_dimen}/(${vCollision})^(1/5) #hertzian time step there was no 0.5 in front
    variable    dt_rayleigh equal 1.5*0.08*PI*${min_dimen}*sqrt(${density}/${shearMod})*(1/(0.8766+0.1631*${poissonsRatio}))  #Rayleigh time step there was no 0.5 in front
    if      "${dt_hertz} < ${dt_rayleigh}" then "variable dt equal ${dt_hertz}" else "variable dt equal ${dt_rayleigh}" #minimum time step
    timestep  ${dt}


    shell mkdir ${SIM_DATA_DIR}/alpha_${aspectRatio}_cof_${COF}_pressure_${pressure_target}_I_${inertialNumber_target}
    shell cd ${SIM_DATA_DIR}/alpha_${aspectRatio}_cof_${COF}_pressure_${pressure_target}_I_${inertialNumber_target}

    variable time_to_shear equal ${final_gamma}/(${shear_rate})
    variable time_steps_shear equal floor(${time_to_shear}/${dt})
    if "${inertialNumber_target} >= 0.1" then "variable number_shear_steps equal 4000*round(12/11*${inertialNumber_target}^(-0.333))" &
        else "variable number_shear_steps equal 4000*round(${inertialNumber_target}^(-0.333))"   # the value 4000 was 2000

    variable    dumpEvery equal round(${time_steps_shear}/(${final_gamma}*100)) #dump output 100 times per shear strain CHANGE BACK TO 50
    variable    thermoEvery equal round(${dumpEvery}/5)  #dump output every 5 thermos 
    fix ts_check all check/timestep/gran ${dumpEvery} 0.15 0.15 #checking hertz and rayleigh criterion 

    print "dt=${dt}, nSteps=${number_shear_steps}, dumpEvery=${dumpEvery}, thermoEvery=${thermoEvery}"

    #variable        mu_xy equal -(c_p[4]/c_p[2])/vol #shear stress

    variable        inertialNumber equal ${shear_rate}*${avgDiameter}/sqrt((abs(c_p[2])/vol)/${density}) #computed inertial number

    variable shear_steps equal ${final_gamma}*10  #adjust cell 10 times every shear strain

    variable partition_shear equal floor(${time_steps_shear}/${number_shear_steps})
    variable half_partition_shear equal ${partition_shear}/2
    variable rounded_half_partition_shear equal round(${half_partition_shear})
    if "(${half_partition_shear}!=${rounded_half_partition_shear})" then "variable partition_shear equal ${partition_shear}+1" #needed for the ave/time command
    variable shear_strain equal time*${shear_rate}
    variable initialStep equal step
    variable time equal (step-${initialStep})*dt# time in seconds
    variable shear_strain equal time*${shear_rate}
    variable avgOmegaZ equal -2*c_average_omegaz/${shear_rate} #average angular velocity in the vorticity plane to compare with vorticity
    variable phi equal ${total_mass}/${density}/vol #packing fraction
    variable gain_integral equal 0  # controller gain for integral part of the error
    variable gain_proportional equal 0.001  # controller gain for proportional part of the error
    variable gain_derivative equal 0  # controller gain for derivative part of the error
    variable ly equal ly

    variable nRepeatPress equal floor(${partition_shear}/2)
    variable nEveryPress equal 2
    variable pdiff equal ${pressure_target}-v_pyy #-*- yields plus
    #fix      avg_diff_running all ave/time ${nEveryPress} ${nRepeatPress} ${partition_shear} v_pdiff v_pyy file alpha_${aspectRatio}_cof_${COF}_I_${inertialNumber_target}_avg_diff_running_running.dat ave running start 0
    fix      avg_diff all ave/time ${nEveryPress} ${nRepeatPress} ${partition_shear} v_pdiff #file alpha_${aspectRatio}_cof_${COF}_I_${inertialNumber_target}_avg_diff_running_one.dat ave one start 0
    
    fix   subtract_momentum all momentum ${partition_shear} linear 1 1 1

    #-----------------SPATIAL AVERAGES ALONG Y DIRECTION ----------------------------
    variable        ly equal ly
    variable        freq equal ${dumpEvery}
    variable        nEvery equal 1
    variable        nRepeat equal 1 #no averaging in time

    fix             vertical_averages all ave/spatial ${nEvery} ${nRepeat} ${freq} &
                                        y lower ${binSize} &
                                        vx vy vz c_omegaz density/mass v_pxx_loc v_pyy_loc v_pzz_loc v_pxy_loc &
                                        units reduced &
                                        file alpha_${aspectRatio}_cof_${COF}_I_${inertialNumber_target}_spatial_averages.dat

    #-----------------OUTPUTS -----------------------------------------

    thermo_style custom v_shear_strain step v_time ke v_press v_pyy v_mu_effective v_phi v_inertialNumber v_msdY v_avg_contacts c_rke c_avgdelta c_maxdelta
    thermo		${thermoEvery}
    dump		dmp all custom/vtk ${dumpEvery} simple_shear_*.vtk id type x y z vx vy vz fx fy fz &
            omegax omegay omegaz shapex shapey shapez quat1 quat2 quat3 quat4 &
            blockiness1 blockiness2 c_thetaX tqx tqy tqz #angmomx angmomy angmomz

    dump_modify dmp binary yes        

    dump        contact_dump1 all local ${dumpEvery} simple_shear_contact_data_*.dump c_contact_data[1] & 
                    c_contact_data[2] c_contact_data[3] c_contact_data[4] c_contact_data[5] c_contact_data[6] c_contact_data[7] &
                    c_contact_data[8] c_contact_data[9] c_contact_data[10] c_contact_data[11] c_contact_data[12] c_contact_data[13] c_contact_data[14] & 
                    c_contact_data[15] c_contact_data[16] #c_contact_data[17] c_contact_data[18] c_contact_data[19] c_contact_data[20] &
                    # c_contact_data[21] c_contact_data[22] c_contact_data[23] c_contact_data[24] c_contact_data[25] c_contact_data[26] c_contact_data[27] 

    fix dataLog all print ${thermoEvery} "${time}, ${shear_strain}, ${inertialNumber}, ${phi}, ${press}, ${pyy}, ${pxy} ,${Nx_diff}, ${Nz_diff}, ${msdY}, ${msdZ}" &
        file alpha_${aspectRatio}_cof_${COF}_I_${inertialNumber_target}_shear_${shear_rate}.csv &
        title "time, shear_strain, inertialNumber, phi, press, p_yy, p_xy, Nx_diff, Nz_diff, msdY, msdZ"  screen no
     
    #variable pyy_diff equal f_avg_diff_running
    run 0
    variable error_old equal 0
    variable error_new equal 0

        # Define initial variables
    variable i loop ${number_shear_steps}
    variable msd_started equal 0

    label loop_start

    # Calculate the time between shear steps
    variable time_between_shear equal dt*${partition_shear}
    
    #variable integral_press_diff equal f_avg_diff_running[1]*${time_between_shear}*$i
    variable error_old equal ${error_new}

    # Run the simulation for a single partition_shear step
    run ${partition_shear} post no

    # Update the variables after each partition_shear step
    variable error_new equal ${pressure_target}-${pyy}
    variable press_derivative equal (${error_new}-${error_old})/${time_between_shear}
    #variable y_delta_top equal -(${gain_proportional}*f_avg_diff+${gain_integral}*${integral_press_diff}+${gain_derivative}*${press_derivative})/2
    variable y_delta_top equal -(${gain_proportional}*f_avg_diff)/2
    variable max_vy_vel equal 0.01*${ly}/${time_between_shear}  #it was 0.01 for most, then 0.0001 for the ones that did not converge
    variable vy_vel equal 2*abs(${y_delta_top})/${time_between_shear}
    if "${vy_vel} > ${max_vy_vel}" then &
        "variable y_delta_top equal ${max_vy_vel}*${time_between_shear}*${y_delta_top}/abs(${y_delta_top})"
    variable y_delta_bot equal -${y_delta_top}

    # Apply the deformation
    fix shear all deform 1 xy erate ${shear_rate} y delta ${y_delta_bot} ${y_delta_top} remap v


    # Update msd calculation if shear strain condition is met
    if "(${shear_strain} >= ${steady_gamma}) && (${msd_started} == 0)" then &
        "compute msd all msd com yes" &
        "variable msdY equal c_msd[2]" &
        "variable msdZ equal c_msd[3]" &
        "variable msd_started equal 1"

    # Update error_old for the next iteration

    # Increment loop counter
    next i
    jump SELF loop_start


    #--------------SHEARING -----------------------------------------
    variable time_between_shear equal dt*${partition_shear}


                #"variable y_delta_top equal -(${gain_proportional}*${press_diff}+${gain_integral}*${integral_press_diff})/2" &
    unfix ts_check
    unfix dataLog
    unfix vertical_averages
    undump dmp
    undump contact_dump1
    unfix avg_diff
    unfix subtract_momentum
  
    #write_restart simple_shear_${aspectRatio}_cof_${COF}_pressure_${pressure_target}_I_${inertialNumber_target}.restart


    next inertialNumber_targets
    uncompute msd
jump SELF loop_shear_rates    
